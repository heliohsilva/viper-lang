# Generated from viper.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,133,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,54,8,1,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,98,8,10,1,11,1,11,1,
        12,1,12,1,13,1,13,1,13,5,13,107,8,13,10,13,12,13,110,9,13,1,14,4,
        14,113,8,14,11,14,12,14,114,1,14,1,14,4,14,119,8,14,11,14,12,14,
        120,3,14,123,8,14,1,15,4,15,126,8,15,11,15,12,15,127,1,15,1,15,1,
        16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,0,25,0,27,12,29,13,31,14,33,15,1,0,5,4,0,37,37,42,43,45,45,
        47,47,2,0,60,60,62,62,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,
        32,32,143,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,1,35,1,0,0,0,3,53,1,0,0,0,5,55,1,0,0,0,7,64,1,0,0,0,9,74,1,
        0,0,0,11,76,1,0,0,0,13,78,1,0,0,0,15,80,1,0,0,0,17,84,1,0,0,0,19,
        86,1,0,0,0,21,97,1,0,0,0,23,99,1,0,0,0,25,101,1,0,0,0,27,103,1,0,
        0,0,29,112,1,0,0,0,31,125,1,0,0,0,33,131,1,0,0,0,35,36,5,96,0,0,
        36,2,1,0,0,0,37,38,5,105,0,0,38,39,5,110,0,0,39,54,5,116,0,0,40,
        41,5,102,0,0,41,42,5,108,0,0,42,43,5,111,0,0,43,44,5,97,0,0,44,54,
        5,116,0,0,45,46,5,99,0,0,46,47,5,104,0,0,47,48,5,97,0,0,48,54,5,
        114,0,0,49,50,5,98,0,0,50,51,5,111,0,0,51,52,5,111,0,0,52,54,5,108,
        0,0,53,37,1,0,0,0,53,40,1,0,0,0,53,45,1,0,0,0,53,49,1,0,0,0,54,4,
        1,0,0,0,55,56,5,102,0,0,56,57,5,117,0,0,57,58,5,110,0,0,58,59,5,
        99,0,0,59,60,5,116,0,0,60,61,5,105,0,0,61,62,5,111,0,0,62,63,5,110,
        0,0,63,6,1,0,0,0,64,65,5,112,0,0,65,66,5,114,0,0,66,67,5,111,0,0,
        67,68,5,99,0,0,68,69,5,101,0,0,69,70,5,100,0,0,70,71,5,117,0,0,71,
        72,5,114,0,0,72,73,5,101,0,0,73,8,1,0,0,0,74,75,5,61,0,0,75,10,1,
        0,0,0,76,77,5,40,0,0,77,12,1,0,0,0,78,79,5,41,0,0,79,14,1,0,0,0,
        80,81,5,111,0,0,81,82,5,117,0,0,82,83,5,116,0,0,83,16,1,0,0,0,84,
        85,5,46,0,0,85,18,1,0,0,0,86,87,7,0,0,0,87,20,1,0,0,0,88,89,5,61,
        0,0,89,98,5,61,0,0,90,91,5,33,0,0,91,98,5,61,0,0,92,98,7,1,0,0,93,
        94,5,62,0,0,94,98,5,61,0,0,95,96,5,60,0,0,96,98,5,61,0,0,97,88,1,
        0,0,0,97,90,1,0,0,0,97,92,1,0,0,0,97,93,1,0,0,0,97,95,1,0,0,0,98,
        22,1,0,0,0,99,100,7,2,0,0,100,24,1,0,0,0,101,102,7,3,0,0,102,26,
        1,0,0,0,103,108,3,23,11,0,104,107,3,25,12,0,105,107,3,23,11,0,106,
        104,1,0,0,0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,
        109,1,0,0,0,109,28,1,0,0,0,110,108,1,0,0,0,111,113,3,25,12,0,112,
        111,1,0,0,0,113,114,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,
        122,1,0,0,0,116,118,5,44,0,0,117,119,3,25,12,0,118,117,1,0,0,0,119,
        120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,123,1,0,0,0,122,
        116,1,0,0,0,122,123,1,0,0,0,123,30,1,0,0,0,124,126,7,4,0,0,125,124,
        1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,129,
        1,0,0,0,129,130,6,15,0,0,130,32,1,0,0,0,131,132,9,0,0,0,132,34,1,
        0,0,0,9,0,53,97,106,108,114,120,122,127,1,6,0,0
    ]

class viperLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    TIPO = 2
    FUNC = 3
    PROC = 4
    ATRTO = 5
    AP = 6
    FP = 7
    WR = 8
    CONCAT = 9
    OPARIT = 10
    OPRELA = 11
    ID = 12
    NUM = 13
    WS = 14
    ErrorChar = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'`'", "'function'", "'procedure'", "'='", "'('", "')'", "'out'", 
            "'.'" ]

    symbolicNames = [ "<INVALID>",
            "TIPO", "FUNC", "PROC", "ATRTO", "AP", "FP", "WR", "CONCAT", 
            "OPARIT", "OPRELA", "ID", "NUM", "WS", "ErrorChar" ]

    ruleNames = [ "T__0", "TIPO", "FUNC", "PROC", "ATRTO", "AP", "FP", "WR", 
                  "CONCAT", "OPARIT", "OPRELA", "LETRA", "NUMERO", "ID", 
                  "NUM", "WS", "ErrorChar" ]

    grammarFileName = "viper.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


