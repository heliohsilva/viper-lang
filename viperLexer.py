# Generated from viper.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,141,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,3,1,58,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,
        1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,3,12,106,8,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,
        5,15,115,8,15,10,15,12,15,118,9,15,1,16,4,16,121,8,16,11,16,12,16,
        122,1,16,1,16,4,16,127,8,16,11,16,12,16,128,3,16,131,8,16,1,17,4,
        17,134,8,17,11,17,12,17,135,1,17,1,17,1,18,1,18,0,0,19,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,0,29,0,
        31,14,33,15,35,16,37,17,1,0,5,4,0,37,37,42,43,45,45,47,47,2,0,60,
        60,62,62,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,151,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,68,1,0,
        0,0,9,78,1,0,0,0,11,80,1,0,0,0,13,82,1,0,0,0,15,84,1,0,0,0,17,86,
        1,0,0,0,19,88,1,0,0,0,21,92,1,0,0,0,23,94,1,0,0,0,25,105,1,0,0,0,
        27,107,1,0,0,0,29,109,1,0,0,0,31,111,1,0,0,0,33,120,1,0,0,0,35,133,
        1,0,0,0,37,139,1,0,0,0,39,40,5,96,0,0,40,2,1,0,0,0,41,42,5,105,0,
        0,42,43,5,110,0,0,43,58,5,116,0,0,44,45,5,102,0,0,45,46,5,108,0,
        0,46,47,5,111,0,0,47,48,5,97,0,0,48,58,5,116,0,0,49,50,5,99,0,0,
        50,51,5,104,0,0,51,52,5,97,0,0,52,58,5,114,0,0,53,54,5,98,0,0,54,
        55,5,111,0,0,55,56,5,111,0,0,56,58,5,108,0,0,57,41,1,0,0,0,57,44,
        1,0,0,0,57,49,1,0,0,0,57,53,1,0,0,0,58,4,1,0,0,0,59,60,5,102,0,0,
        60,61,5,117,0,0,61,62,5,110,0,0,62,63,5,99,0,0,63,64,5,116,0,0,64,
        65,5,105,0,0,65,66,5,111,0,0,66,67,5,110,0,0,67,6,1,0,0,0,68,69,
        5,112,0,0,69,70,5,114,0,0,70,71,5,111,0,0,71,72,5,99,0,0,72,73,5,
        101,0,0,73,74,5,100,0,0,74,75,5,117,0,0,75,76,5,114,0,0,76,77,5,
        101,0,0,77,8,1,0,0,0,78,79,5,61,0,0,79,10,1,0,0,0,80,81,5,40,0,0,
        81,12,1,0,0,0,82,83,5,41,0,0,83,14,1,0,0,0,84,85,5,123,0,0,85,16,
        1,0,0,0,86,87,5,125,0,0,87,18,1,0,0,0,88,89,5,111,0,0,89,90,5,117,
        0,0,90,91,5,116,0,0,91,20,1,0,0,0,92,93,5,46,0,0,93,22,1,0,0,0,94,
        95,7,0,0,0,95,24,1,0,0,0,96,97,5,61,0,0,97,106,5,61,0,0,98,99,5,
        33,0,0,99,106,5,61,0,0,100,106,7,1,0,0,101,102,5,62,0,0,102,106,
        5,61,0,0,103,104,5,60,0,0,104,106,5,61,0,0,105,96,1,0,0,0,105,98,
        1,0,0,0,105,100,1,0,0,0,105,101,1,0,0,0,105,103,1,0,0,0,106,26,1,
        0,0,0,107,108,7,2,0,0,108,28,1,0,0,0,109,110,7,3,0,0,110,30,1,0,
        0,0,111,116,3,27,13,0,112,115,3,29,14,0,113,115,3,27,13,0,114,112,
        1,0,0,0,114,113,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,
        1,0,0,0,117,32,1,0,0,0,118,116,1,0,0,0,119,121,3,29,14,0,120,119,
        1,0,0,0,121,122,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,130,
        1,0,0,0,124,126,5,46,0,0,125,127,3,29,14,0,126,125,1,0,0,0,127,128,
        1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,131,1,0,0,0,130,124,
        1,0,0,0,130,131,1,0,0,0,131,34,1,0,0,0,132,134,7,4,0,0,133,132,1,
        0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,137,1,
        0,0,0,137,138,6,17,0,0,138,36,1,0,0,0,139,140,9,0,0,0,140,38,1,0,
        0,0,9,0,57,105,114,116,122,128,130,135,1,6,0,0
    ]

class viperLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    TIPO = 2
    FUNC = 3
    PROC = 4
    ATRTO = 5
    AP = 6
    FP = 7
    AC = 8
    FC = 9
    WR = 10
    CONCAT = 11
    OPARIT = 12
    OPRELA = 13
    ID = 14
    NUM = 15
    WS = 16
    ErrorChar = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'`'", "'function'", "'procedure'", "'='", "'('", "')'", "'{'", 
            "'}'", "'out'", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "TIPO", "FUNC", "PROC", "ATRTO", "AP", "FP", "AC", "FC", "WR", 
            "CONCAT", "OPARIT", "OPRELA", "ID", "NUM", "WS", "ErrorChar" ]

    ruleNames = [ "T__0", "TIPO", "FUNC", "PROC", "ATRTO", "AP", "FP", "AC", 
                  "FC", "WR", "CONCAT", "OPARIT", "OPRELA", "LETRA", "NUMERO", 
                  "ID", "NUM", "WS", "ErrorChar" ]

    grammarFileName = "viper.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


